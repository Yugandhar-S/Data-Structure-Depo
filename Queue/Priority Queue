#include<iostream>
using namespace std;
int Q[100], MaxSize, front, rear;

void createQueue(int size){
	MaxSize = size;
	front = 0;
	rear = -1;
}

void Enqueue(int e){
	int i, j, t;
	rear++;
	Q[rear] = e;

	for (i = front; i < rear; i++){
		for (j = front; j < rear; j++){
			if (Q[j] < Q[j + 1]){
				t = Q[j];
				Q[j] = Q[j + 1];
				Q[j + 1] = t;
			}
		}
	}
}

int Dequeue(){
	int temp;
	temp = Q[front];
	front++;
	return temp;
}

int isFull(){
	if (rear == MaxSize - 1)
		return 1;
	else return 0;
}

int isEmpty(){
	if (front > rear)
		return 1;
	else return 0;
}

void printQueue(){
	int i;
	for (i = front; i <= rear; i++)
		cout << Q[i] << " ";
}

int main(){
	int ch, e, size;
	cout << "Enter Size" << endl;
	cin >> size;
	createQueue(size);


	do
	{
		cout << "\n1.Enqueue"
			<< "\n2.Dequeue"
			<< "\n3.Print"
			<< "\n0.Exit" << endl;
		cin >> ch;

		switch (ch)
		{
		case 1:{
			if (isFull() == 1)
				cout << "Queue is full" << endl;
			else{
				cout << "Enter number for Queue" << endl;
				cin >> e;
				Enqueue(e);
			}
			break;

		}

		case 2:{
			if (isEmpty() == 1)
				cout << "Queue is empty" << endl;
			else{
				e = Dequeue();
				cout << "The deleted number is " << e << endl;
			}
			break;
		}

		case 3:{
			if (isEmpty() == 1)
				cout << "Queue is empty" << endl;
			else
				printQueue();
			break;
		}

		case 0: {
			cout << "Exiting" << endl;
			break;
		}

		default:
			cout << "Error" << endl;
			break;
		}


	} while (ch != 0);
}
